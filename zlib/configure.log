--------------------
./configure --help
Mon  4 Nov 2024 19:34:40 +03
usage:
  configure [--const] [--zprefix] [--prefix=PREFIX]  [--eprefix=EXPREFIX]
    [--static] [--64] [--libdir=LIBDIR] [--sharedlibdir=LIBDIR]
    [--includedir=INCLUDEDIR] [--archs="-arch i386 -arch x86_64"]
--------------------
./configure --prefix=/Users/alexiaputellas/.src/snort/storage
Mon  4 Nov 2024 19:35:54 +03
Checking for gcc...
=== ztest81630.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest81630.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest81630.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest81630.c

Checking for shared library support...
=== ztest81630.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c -O3 -fPIC ztest81630.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.3.1 -O3 -fPIC -o ztest81630.dylib ztest81630.o
Building shared library libz.1.3.1.dylib with gcc.

=== ztest81630.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
gcc -c -O3 ztest81630.c
Checking for size_t... Yes.

=== ztest81630.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest81630.c
ztest81630.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
    2 | off64_t dummy = 0;
      | ^~~~~~~
      | off_t
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_off_t.h:31:33: note: 'off_t' declared here
   31 | typedef __darwin_off_t          off_t;
      |                                 ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest81630.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest81630 ztest81630.c
Checking for fseeko... Yes.

=== ztest81630.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest81630 ztest81630.c
Checking for strerror... Yes.

=== ztest81630.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest81630.c
Checking for unistd.h... Yes.

=== ztest81630.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest81630.c
Checking for stdarg.h... Yes.

=== ztest81630.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest81630.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest81630.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest81630 ztest81630.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest81630.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest81630.c
Checking for return value of vsnprintf()... Yes.

=== ztest81630.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest81630.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = /usr/bin/libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP =
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.3.1
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.3.1.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.3.1
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /Users/alexiaputellas/.src/snort/storage
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure
Fri  8 Nov 2024 14:11:18 +03
Checking for gcc...
=== ztest12018.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest12018.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest12018.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest12018.c

Checking for shared library support...
=== ztest12018.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c -O3 -fPIC ztest12018.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.3.1 -O3 -fPIC -o ztest12018.dylib ztest12018.o
Building shared library libz.1.3.1.dylib with gcc.

=== ztest12018.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
gcc -c -O3 ztest12018.c
Checking for size_t... Yes.

=== ztest12018.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest12018.c
ztest12018.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
    2 | off64_t dummy = 0;
      | ^~~~~~~
      | off_t
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_off_t.h:31:33: note: 'off_t' declared here
   31 | typedef __darwin_off_t          off_t;
      |                                 ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest12018.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest12018 ztest12018.c
Checking for fseeko... Yes.

=== ztest12018.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest12018 ztest12018.c
Checking for strerror... Yes.

=== ztest12018.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest12018.c
Checking for unistd.h... Yes.

=== ztest12018.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest12018.c
Checking for stdarg.h... Yes.

=== ztest12018.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest12018.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest12018.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest12018 ztest12018.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest12018.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest12018.c
Checking for return value of vsnprintf()... Yes.

=== ztest12018.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest12018.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = /usr/bin/libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP =
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.3.1
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.3.1.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.3.1
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure --version
Fri  8 Nov 2024 14:11:49 +03
unknown option: --version
./configure --help for help
** ./configure aborting.
--------------------


